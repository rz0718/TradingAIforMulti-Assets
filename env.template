# =============================================================================
# Trading Bot Environment Configuration Template
# =============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit the .env file to version control

# =============================================================================
# DATA STORAGE
# =============================================================================
# Directory where the bot stores data files (CSV logs, state, etc.)
# Default: ./data (relative to project root)
TRADEBOT_DATA_DIR=./data

# =============================================================================
# BINANCE API CREDENTIALS
# =============================================================================
# Get these from: https://www.binance.com/en/my/settings/api-management
# Required for market data and trading operations
BN_API_KEY=your_binance_api_key_here
BN_SECRET=your_binance_secret_key_here

# =============================================================================
# LLM PROVIDER CONFIGURATION
# =============================================================================
# API key for your LLM provider (OpenAI, Anthropic, or compatible service)
LLM_API_KEY=your_llm_api_key_here

# Base URL for LLM API (optional, for custom providers or proxies)
# Leave empty for default OpenAI endpoints
# Examples:
# - OpenAI: (leave empty)
# - Anthropic: https://api.anthropic.com
# - Local model: http://localhost:11434/v1
# - Custom proxy: https://your-proxy.com/v1
LLM_BASE_URL=

# Model name to use for trading decisions
# Examples: gpt-4o, gpt-4o-mini, claude-3-5-sonnet-20241022
LLM_MODEL_NAME=gpt-4o

# =============================================================================
# TELEGRAM NOTIFICATIONS (OPTIONAL)
# =============================================================================
# Bot token from @BotFather on Telegram
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Chat ID where notifications will be sent
# Get this by messaging your bot and checking: https://api.telegram.org/bot<TOKEN>/getUpdates
TELEGRAM_CHAT_ID=your_telegram_chat_id_here

# =============================================================================
# RISK MANAGEMENT
# =============================================================================
# Risk-free rate for calculations (annual rate as decimal)
# Default: 0.0 (0%)
# Example: 0.05 for 5% annual risk-free rate
RISK_FREE_RATE=0.0

# =============================================================================
# TRADING CONFIGURATION (Advanced - modify with caution)
# =============================================================================
# These are set in config.py but can be overridden here if needed
# Uncomment and modify only if you understand the implications

# Starting capital in USD
# START_CAPITAL=10000.0

# Trading interval for market data collection
# INTERVAL=3m

# Check interval in seconds (how often to run the trading loop)
# CHECK_INTERVAL=1800

# Technical indicator parameters
# EMA_LEN=20
# RSI_LEN=14
# MACD_FAST=12
# MACD_SLOW=26
# MACD_SIGNAL=9

# Trading symbols to monitor (comma-separated)
# SYMBOLS=ETHUSDT,SOLUSDT,XRPUSDT,BTCUSDT,DOGEUSDT,BNBUSDT

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. Never share your API keys with anyone
# 2. Use read-only API keys for backtesting
# 3. Enable IP whitelisting on your exchange accounts
# 4. Regularly rotate your API keys
# 5. Monitor your account for unauthorized activity
# 6. Start with small amounts when testing live trading

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================
# 1. Copy this file: cp env.template .env
# 2. Fill in your actual API keys and configuration
# 3. Test your configuration: python -m bot.clients
# 4. Start the bot: python main.py
